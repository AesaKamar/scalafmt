40 columns                              |
<<< SKIP Syntax rich
@ foobar("annot", {
  val x = 2
  val y = 2 // y=2
  x + y
})
 object
  a  extends b with c {
   def
   foo[T:Int#Double#Triple,
       R <% String](
    @annot1
    x
    : Int @annot2 = 2
    , y: Int = 3): Int = {
    "match" match {
      case 1 | 2 =>
        3
      case <A>2</A> => 2
    }
   }
}
>>>
@foobar("annot",
        {
          val x = 2
          val y = 2 // y=2
          x + y
        }) object a extends b with c {
  def foo[T: Int#Double#Triple,
          R <% String](@annot1 x: Int
                       @annot2 = 2,
                       y: Int
                         = 3): Int = {
    "match" match {
      case 1 | 2 => 3
      case <A>2</A> => 2
    }
  }
}
<<< SKIP scalajs 1
object a {
  private def genApplyForSym(minArgc: Int, hasRestParam: Boolean,
      sym: Symbol): js.Tree = {
    if (isScalaJSDefinedJSClass(currentClassSym) &&
        sym.owner != currentClassSym.get) {
      genApplyForSymJSSuperCall(minArgc, hasRestParam, sym)
    } else {
      genApplyForSymNonJSSuperCall(minArgc, sym)
    }
  }
}
>>>
object a {
  private def genApplyForSym(minArgc: Int, hasRestParam: Boolean,
      sym: Symbol): js.Tree = {
    if (isScalaJSDefinedJSClass(currentClassSym) &&
        sym.owner != currentClassSym.get) {
      genApplyForSymJSSuperCall(minArgc, hasRestParam, sym)
    } else {
      genApplyForSymNonJSSuperCall(minArgc, sym)
    }
  }
}
