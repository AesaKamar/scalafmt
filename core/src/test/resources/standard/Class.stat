80 columns                                                                     |
<<< Long line
class Formatter(style: ScalaStyle, tree: Tree, toks: Array[FormatToken], statementStarts: Set[Token], owners: Map[Token, Tree])
>>>
class Formatter(style: ScalaStyle, tree: Tree, toks: Array[FormatToken],
    statementStarts: Set[Token], owners: Map[Token, Tree])
<<< Really really long.
case class State(
    cost: Int,
    policy: Decision => Decision,
    splits: Vector[Split],
    indentation: Int,
    indents: Vector[Push],
    column: Int) extends Ordered[State] with ScalaFmtLogger
>>>
case class State(cost: Int, policy: Decision => Decision,
    splits: Vector[Split], indentation: Int, indents: Vector[Push],
    column: Int) extends Ordered[State] with ScalaFmtLogger
<<< With targs
case class Indent[ T <: Length] (length: T, expire: Token, expiresAt: ExpiresOn)
>>>
case class Indent[T <: Length](length: T, expire: Token, expiresAt: ExpiresOn)
<<< SKIP newline extends is cheapest
case class CaseMissingArrow(tree: Case) extends Error(
      s"Missing => in case: \n$tree")
>>>
case class CaseMissingArrow(tree: Case)
    extends Error(s"Missing => in case: \n$tree")
<<< SKIP newline extends is cheapest 2
class BestFirstSearch(style: ScalaStyle, tree: Tree, range: Set[Range])
        extends ScalaFmtLogger
>>>
class BestFirstSearch(style: ScalaStyle, tree: Tree, range: Set[Range])
    extends ScalaFmtLogger
