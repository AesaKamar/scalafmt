80 columns                                                                     |
<<< Long line
val newIndents: Vector[Indent[Num]]
      = nonExpiredIndents ++ split.indents.map(_ .withNum(column, indentation))
>>>
val newIndents: Vector[Indent[Num]] =
  nonExpiredIndents ++ split.indents.map(_.withNum(column, indentation))
<<< Don't break
var inside =
    false
>>>
var inside = false
<<< underscore assignment
var inside: Int   = _
>>>
var inside: Int = _
<<< && gets space
val attachedComment = !rightIsOnNewLine&& isInlineComment(right)
>>>
val attachedComment = !rightIsOnNewLine && isInlineComment(right)
<<< break in higher nesting
    val longHash: Long =
      (token.privateTag.toLong << (62 - 8)) |
        (token.start.toLong << (62 - (8 + 28))) | token.end
>>>
val longHash: Long =
  (token.privateTag.toLong << (62 - 8)) |
  (token.start.toLong << (62 - (8 + 28))) | token.end
<<< ONLY backticks get no space
  val `type`: String = js.native
>>>
val `type`: String = js.native
