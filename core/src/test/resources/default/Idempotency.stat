80 columns                                                                     |
<<< paulp example #192
class A {
  def traced(in: A => Unit, out: B => Unit): Fun[A, B] = ( f
    .   mapIn[A] { x => in(x) ; x }
    .  mapOut[B] { x => out(x) ; x }
  )
}
>>>
class A {
  def traced(in: A => Unit, out: B => Unit): Fun[A, B] =
    (f.mapIn[A] { x =>
        in(x); x
      }
      .mapOut[B] { x =>
        out(x); x
      })
}
<<< akka 1
{{{
val bindingFuture = Http().bindAndHandleSync({
        case HttpRequest(_, _, headers, _, _) ⇒
          val upgrade = headers.collectFirst { case u: UpgradeToWebSocket ⇒ u }.get
          upgrade.handleMessages(Flow.fromSinkAndSource(Sink.ignore, Source.fromPublisher(source)), None)
      }, interface = "localhost", port = 0)
}}}
>>>
{
  {
    {
      val bindingFuture = Http().bindAndHandleSync({
        case HttpRequest(_, _, headers, _, _) ⇒
          val upgrade =
            headers.collectFirst { case u: UpgradeToWebSocket ⇒ u }.get
          upgrade.handleMessages(
              Flow.fromSinkAndSource(Sink.ignore,
                                     Source.fromPublisher(source)),
              None)
      }, interface = "localhost", port = 0)
    }
  }
}
<<< SKIP raw-request idempotent
{{{{{{
          RawRequestURI(new String(uriBytes, HttpCharsets.aaaaaaaaaa.nioCharset)) :: headers
}}}}}}
>>>
x
