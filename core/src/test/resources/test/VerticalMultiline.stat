verticalMultilineAtDefinitionSite = true
maxColumn = 80
<<< curried function over maxColumn
def format_![T <: Tree](code: String, foo: Int)(f: A => B, k: D)(implicit ev: Parse[T], ev2: EC): String
>>>
def format_![T <: Tree](
    code: String,
    foo: Int
  )(f: A => B,
    k: D
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< curried function under maxColumn
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String

<<< small multi-line functions should fit in one line
def format_![T <: Tree](
    code: String)(
    f: A => B)
    (implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String

<<< curried function mixed style 1
def format_![T <: Tree](
    code: String,
    code2: String
  )(implicit ev: Parse[T], ex: D): String = 1
>>>
def format_![T <: Tree](
    code: String,
    code2: String
  )(implicit ev: Parse[T],
    ex: D
  ): String = 1

<<< curried function mixed style 2
def format_![T <: Tree](code: String, foo: Int)(
  f: A => B
  )(implicit ev: Parse[T],
  ev2: EC)
  : String
>>>
def format_![T <: Tree](
    code: String,
    foo: Int
  )(f: A => B
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< should work with comments
def format_![T <: Tree](
    code: String, // The code!
    code2: String
  )(implicit ev: Parse[T], // The Parser!!! Some very long comment that goes over limit
  ex: D): String = 1
>>>
def format_![T <: Tree](
    code: String, // The code!
    code2: String
  )(implicit ev: Parse[T], // The Parser!!! Some very long comment that goes over limit
    ex: D
  ): String = 1

<<< should not modify into single line if it has comments
def format_!(
    code: String, // The code!
    code2: String
  ): String = 1
>>>
def format_!(
    code: String, // The code!
    code2: String
  ): String = 1

<<< should work with defaulted method
def format_![T <: Tree](
  name: Name,
  code: String = Defaults.code, updatedAt: Instant = Instant.now(),
  createdAt: Instant = Instant.now())
  (implicit ev: Parse[T],
  ev2: EC)
  : String
>>>
def format_![T <: Tree](
    name: Name,
    code: String = Defaults.code,
    updatedAt: Instant = Instant.now(),
    createdAt: Instant = Instant.now()
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< should not affect classes
final class UserProfile(name: String, age: Int, address: Address, profession: Profesion, school: School)
  extends Profile with UserSettings
>>>
final class UserProfile(name: String,
                        age: Int,
                        address: Address,
                        profession: Profesion,
                        school: School)
    extends Profile
    with UserSettings
