@import Main._
@import org.scalafmt.rewrite._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig

@sect{0.7.0-RC1}
  @note. BROKEN RELEASE, use @sect.ref{1.0.0-RC1} instead.
  See @issue(943) and @lnk{https://issues.sonatype.org/browse/OSSRH-31815}.
  @ul
    @li
      @b{NEW}. scalafmt-core now has experimental/lightly-tested support for
      Scala.js!
      I believe this opens up exciting opportunities to build applications such
      as browser extension for formatting code on github.com or
      VSCode/Atom plugin development.
    @li
      @b{Breaking}.
       Homebrew, the scalafmt_auto bash script and Github releases are no
       longer supported for installing the command line application.
       Motivation for this change is explained @lnk("here",
       "https://github.com/scalameta/scalafmt/commit/0cf3b79be32ed084875e167a52af31272c577570").

      @p
        @sect.ref{Coursier} is now the only recommended way to install
        the command-line application for Linux, Mac and Windows.
        With coursier can benefit from
        @ul
          @li
            cached downloads of shared dependencies between version upgrades (saving 5-10mb per upgrade)
          @li
            custom JVM options for generated executable
          @li
            ability to generate slim 16kb bootstrap script by removing `--standalone`,
            which can be committed to git/VCS

      @p
        I admit that the long coursier command is harder to remember than
        @code{homebrew upgrade scalafmt}.
        Please pitch your ideas @lnk("here",
        "https://github.com/coursier/coursier/issues/324#issuecomment-296481788")
        on how to make installing command line apps with coursier as easy as
        @code{coursier install/upgrade scalafmt}!
    @li
      @b{Breaking}. sbt-scalafmt no longer supports 0.13.
      sbt-scalafmt will only be published against sbt 1.0 from now on.
      The motivation for this change is to take full advantage of sbt on
      Scala 2.12. There is no longer a need for classloading hacks to run
      scalafmt from 2.10.

      @p
        This change brings new opportunities to add new features to the
        sbt plugin, for example @code{reformatOnCompile} if someone is motivated
        to contribute that feature.

      @p
        Note, I want to stress that sbt 1.0 brings incredible new opportunities for Scala tooling.
        Scalameta, which scalafmt uses for parsing, does not support Scala 2.10,
        which sbt 0.13 plugins are required to run on.
        I highly recommend you try to upgrade your build to sbt 1.0 as soon as
        possible.

    @li
      @b{NEW} Two settings
      newlines.beforeImplicitKWInVerticalMultiline=false
      and
      newlines.afterImplicitKWInVerticalMultiline=false

      @hl.scala
        // newlines.afterImplicitKWInVerticalMultiline = true
        // newlines.beforeImplicitKWInVerticalMultiline = true
        def format(
          code: String,
          age: Int
        )(
          implicit
          ev: Parser,
          c: Context
        ): String
        // newlines.afterImplicitKWInVerticalMultiline = true
        // newlines.beforeImplicitKWInVerticalMultiline = false
        def format(
          code: String,
          age: Int
        )(implicit
          ev: Parser,
          c: Context
        ): String

      Thank you @user{sugakandrey} for contributing this new feature!
