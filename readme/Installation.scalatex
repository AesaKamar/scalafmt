@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig
@import org.scalafmt.{Versions => V}

@sect{Installation}

  @sect{CLI}
    The recommended way to install the @code{scalafmt} command line tool is with
    @sect.ref{Coursier}.

    @sect{Coursier}
      @p
        @note To install Coursier see @lnk("here", "https://github.com/coursier/coursier#command-line")

      @p
        Create a standalone executable in @code{/usr/local/bin/scalafmt} with (sudo if necessary):
        @hl.xml
          coursier bootstrap com.geirsson:scalafmt-cli_2.12:@V.stable \
            -r bintray:scalameta/maven \
            -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli
          scalafmt --version # should be @org.scalafmt.Versions.stable

      @p
        Alternatively you can create a slim 15 KiB bootstrap script with:
        @hl.xml
          coursier bootstrap com.geirsson:scalafmt-cli_2.12:@V.stable \
            -r bintray:scalameta/maven \
            -o scalafmt --main org.scalafmt.cli.Cli
          ./scalafmt --version # should be @org.scalafmt.Versions.stable

        It is @b{recommended} to put this bootstrap script in your code repository
        to make sure everyone on your team, as well as CI, uses the same scalafmt
        version. To configure which files to format, see @sect.ref{project}.

      @p
        To customize the JVM options, use the Coursier option @code{--java-opt}, more info with
        @hl.xml
          coursier bootstrap --help | grep -A 1 "\-\-java-opt"

    @sect{Pre-release}
      Our CI publishes a pre-release version of scalafmt to Bintray on every merge into master.
      To use a pre-release, replace @V.stable with the version here:

      @raw
        <a href='https://bintray.com/scalameta/maven/scalafmt-cli/_latestVersion'><img src='https://api.bintray.com/packages/scalameta/maven/scalafmt-cli/images/download.svg'></a>

      @p
        If you use coursier to install a pre-release, be sure to include the flag @code{-r bintray:scalameta/maven}
        so that the artifact can be resolved.
      @p
        If you use sbt to install a pre-release, be sure to add the following setting
        @hl.scala
          resolvers += Resolver.bintray("scalameta", "maven")

    @sect{Nailgun}

      Nailgun is recommended if you want to integrate @code{scalafmt} with a
      text editor like vim/Emacs/Atom/Sublime/VS Code.
      @ul
        @li
          Make sure you have a nailgun client installed. For example with @code{brew install nailgun}.
        @li
          Create a standalone executable in @code{/usr/local/bin/scalafmt_ng} with (sudo if necessary)
          @hl.xml
            coursier bootstrap --standalone com.geirsson:scalafmt-cli_2.12:@V.stable \
              -r bintray:scalameta/maven \
              -o /usr/local/bin/scalafmt_ng -f --main com.martiansoftware.nailgun.NGServer
            scalafmt_ng & // start nailgun in background
            ng ng-alias scalafmt org.scalafmt.cli.Cli
            ng scalafmt --version # should be @org.scalafmt.Versions.stable

      @p
        Nailgun keeps scalafmt running on a local server to avoid the JVM startup penalty
        and also so scalafmt can benefit from JIT.
        This makes scalafmt up to 10x faster when formatting a single file from the CLI.
        The downside to Nailgun is that the setup is complicated and the long-running server
        needs to be restarted once in awhile.

    @sect{Homebrew}
      You can install scalafmt via Homebrew using a custom formula
        @hl.scala
          brew install --HEAD olafurpg/scalafmt/scalafmt
          scalafmt --version // should be @V.stable

          // to upgrade between releases
          brew upgrade scalafmt


    @sect{--help}

      @note. This help page is generated from the @code{master} branch and
      may include flags that have not been published yet.
      @hl.scala()

      @hl.scala(
        org.scalafmt.cli.CliArgParser.buildInfo + "\n" +
        org.scalafmt.cli.CliArgParser.scoptParser.usage)

  @sect{IntelliJ}
    @lnk("Here is the plugin", "https://plugins.jetbrains.com/plugin/8236?pr=").
    You can install it directly from within IntelliJ,
    @ul
      @li
        open @code("Settings > Plugins")
      @li
        open @code("Browse repositories")
      @li
        search for @code("scalafmt")
      @li
        restart IntelliJ.

    @p
      The default shortcut is @code("Ctrl + Shift + L").
      Undo works, but not redo.

    @p
      The plugin determines which style to use in this order:
      @ol
        @li
          @code(".scalafmt.conf") in the project's root directory, if it exists
        @li
          @code("$HOME/.scalafmt.conf"), if it exists
        @li
          Otherwise, uses @code("default") style.
      For details on how @code(".scalafmt.conf") should look like, see
      @sect.ref{Configuration}.

      The scalafmt IntelliJ plugin has a "Format on save" setting.
      @ul
        @li
          To enable for current project: Settings > Tools > Scalafmt
        @li
          To enable for all future project: File > Other settings > Default settings > Scalafmt

    @p
      @note. You may need to enable balloons to get error message:
      Settings > Appearance & Behavior > Notifications > Scalafmt > Popup "Balloon".
      You need to first check "Display Balloon Notifications".


  @sect{sbt}
    You can choose between
    @ul
      @li
        @sect.ref{sbt-scalafmt} (sbt 1.0 only)
      @li
        @sect.ref{neo-sbt-scalafmt} (sbt 0.13 and sbt 1.0)

    @sect{sbt-scalafmt}

      @hl.scala
        // In project/plugins.sbt. Note, does not support sbt 0.13, only sbt 1.0.
        addSbtPlugin("com.geirsson" % "sbt-scalafmt" % "@org.scalafmt.Versions.stable")

      The plugin provides several tasks and settings.

      @hl.ref(
        wd / "scalafmt-sbt" / "src" / "main" / "scala" / "org" / "scalafmt" / "sbt" / "ScalafmtPlugin.scala",
        start = "autoImport",
        end = "import autoImport"
      )

      The sbt plugin is enabled by default for the @code{Test} and @code{Compile} configurations.
      To enable the plugin for integration tests
      @hl.scala
        inConfig(IntegrationTest)(scalafmtConfigSettings)
      and then use @code{it:scalafmt} to format.

      @p
        Pro tip. To share configuration across projects, you can define a setting
        in @code{build.sbt} to generate .scalafmt.conf programmatically on sbt load.

        @hl.scala
          // define setting key to write configuration to .scalafmt.conf
          SettingKey[Unit]("scalafmtGenerateConfig") :=
            IO.write( // writes to file once when build is loaded
              file(".scalafmt.conf"),
              """style = IntelliJ
                |# Your configuration here
                """.stripMargin.getBytes("UTF-8")
            )

    @sect{neo-sbt-scalafmt}
      @p
        @lnk("lucidsoftware/neo-sbt-scalafmt", "https://github.com/lucidsoftware/neo-sbt-scalafmt") is
        an sbt plugin that
        @ul
          @li
            supports both sbt 0.13 and 1.0.0
          @li
            supports any version of scalafmt
          @li
            runs in-process
          @li
            uses SBT's @code{update} resolutions mechanism, which tends to be
            slow for large multi-module builds.

  @sect{Gradle}
    It is possible to use scalafmt in gradle with the following externally maintained plugins:

    @ul
      @li
        @lnk("Spotless", "https://github.com/diffplug/spotless/tree/master/plugin-gradle#applying-scalafmt-to-scala-files")
      @li
        @lnk("gradle-scalafmt", "https://github.com/alenkacz/gradle-scalafmt")

  @sect{Maven}
    It is possible to use scalafmt in Maven with the following externally maintained plugin:
    @ul
      @li
        @lnk("mvn_scalafmt", "https://github.com/SimonJPegg/mvn_scalafmt")

  @sect{Mill}
    Mill have scalafmt support built-in:
    
    @ul
      @li
        @lnk("scalafmt module", "http://www.lihaoyi.com/mill/page/configuring-mill.html#reformatting-your-code")

  @sect{Vim}
    @ul
      @li
        Make sure you have the @sect.ref{CLI} installed and working.
      @li
        install @lnk("vim-autoformat", "https://github.com/Chiel92/vim-autoformat")
      @li
        add to your @code(".vimrc")
        @hl.scala
          noremap <F5> :Autoformat<CR>
          let g:formatdef_scalafmt = "'scalafmt --stdin'"
          let g:formatters_scala = ['scalafmt']

    @note. You pay the JVM startup penalty on every format unless you're using
    @sect.ref{Nailgun}.

  @sect{Standalone library}
    Add to your dependencies
    @hl.scala
      libraryDependencies += "com.geirsson" %% "scalafmt-core" % "@V.stable"
      libraryDependencies += "com.geirsson" %% "scalafmt-cli" % "@V.stable"
      // Scala.js
      libraryDependencies += "com.geirsson" %%% "scalafmt-core" % "@V.stable"
    @p
      Use the API like this

    @repl
      org.scalafmt.Scalafmt.format("""
      object FormatMe { List(Split(Space, 0).withPolicy(SingleLineBlock(close)), Split(Newline, 1).withPolicy{ case Decision(t@@FormatToken(_, `close`, _), s) => Decision(t, List(Split(Newline, 0)))}.withIndent(2, close, Right)) }
       """).get

  @sect{Help wanted!}

    @ul
      @li
        Ensime
      @li
        Scala IDE (@lnk("help wanted!", "https://github.com/scalameta/scalafmt/issues/125"))
      @li
        Your favorite editor? Join the gitter channel.
