@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.ScalafmtStyle

@sect{Changelog}
  @sect{0.3.0}
    @ul
      @li
        @b{NEW}. Scalafmt formats SBT files! Run the CLI or IntelliJ
        plugin on a @code{*.sbt} file and it should just work automatically.
        Set @code{--formatSbtFiles false} to disable this.
      @li
        Benchmarks reveal that v0.3.0 is roughly 20-30% faster than v0.2.12,
        thanks to the updated dependency on scala.meta 1.0.
      @li
        Some formatting rules have been polished.

        @hl.scala
          // 1. Indentation for orphan parentheses is no longer 4 spaces.
          // Before
          assert((p1 match {
                case Param.Configured(x) => x()
                case x => throw new MatchError(x)
              }) == failureAccrualPolicy)
          // 0.3.0
          assert((p1 match {
            case Param.Configured(x) => x()
            case x => throw new MatchError(x)
          }) == failureAccrualPolicy)

          // 2. Line breaks in nested scopes are more heavily penalized.
          // Before
          system.actorOf(Props[ThreadNameEcho].withDispatcher(
              "myapp.balancing-dispatcher")) ! "what's the name?"
          // 0.3.0
          system.actorOf(
              Props[ThreadNameEcho]
                .withDispatcher("myapp.balancing-dispatcher")) ! "what's the name?"

      @li
        The default @code{--continuationIndentCallSite} is now 2 spaces
        instead of 4 spaces.
        Why? Because it's consistent with many popular coding styles and it
        saves a lot of horizontal space for deeply nested code.
        @code{--continuationIndentCallSite} is still 4 spaces to prevent
        method bodies from aligning with parameter lists:

        @hl.scala
          def foo(
              a: Int): Int = {
            a + 1
          }
      @li
        Function literals in argument lists can now be single line.
        See @issue(323).
        @hl.scala
          // before
          ClusterSharding(system).start(
            className[Flow], {
              case (name: String, payload) => (name, payload)
            }, {
              case (name: String, _) => (name.hashCode % shardCount).toString
            }
          )
          // 0.3.0
          ClusterSharding(system).start(
            className[Flow],
            { case (name: String, payload) => (name, payload) },
            { case (name: String, _) => (name.hashCode % shardCount).toString }
          )
      @li
        @code{--assumeStandardLibraryStripMargin true} now aligns by a pipe
        character on the first line if there is one. See @issue(324).
        @hl.scala
          // before
          """|first
            |second""".stripMargin
          // 0.3.0
          """|first
             |second""".stripMargin
      @li
        New flag: @code{--alignMixedOwners <bool>} to allow vertical alignment
        across val/var/def and object/trait/class. Enabled by default in
        @code{defaultWithAlign}. See @issue(184).
      @li
        New flag @code{--binPackImportSelectors <bool>} to decide how to format
        long import selector lines. See @issue(101).
        @hl.scala
          // before
          import org.scalajs.dom.experimental.serviceworkers.{ServiceWorkerGlobalScope, ServiceWorkerRegistration, A}
          // 0.3.0 --binPackImportSelectors false (default)
          import org.scalajs.dom.experimental.serviceworkers.{
            ServiceWorkerGlobalScope,
            ServiceWorkerRegistration,
            A
          }
          // 0.3.0 --binPackImportSelectors true
          import org.scalajs.dom.experimental.serviceworkers.{
            ServiceWorkerGlobalScope, ServiceWorkerRegistration,
            A
          }
      @li
        Line breaks after the assignment operator @code{=} in vals and vars
        are now preserved. See @issue(356).
        @hl.scala
          // If you force a line break after = like this
          val x: Int =
            2
          // then scalafmt will keep the line break. Before scalafmt
          // would move the whole statement into a single line.
      @li
        Macro formatting is better. See @issue(360).
        @hl.scala
          // before
          implicit def adtSyntax[A](target: A): Any = macro LiftMacros
            .materializeADTSyntax[A]
          // 0.3.0
          implicit def adtSyntax[A](target: A): Any =
            macro LiftMacros.materializeADTSyntax[A]
      @li
        Trailing whitespace is now removed from comments.
      @li
        Self-annotation are more consistently formatted. See @issue(376).
      @li
        A long standing issue that caused the SBT plugin to crash on
        2.10 projects has now been fixed. See @issue(190).
      @li
        Backwards incompatible change: @code{FormatResult.Incomplete} is now
        a @code{FormatResult.Failure(e: Incomplete)}.
      @li
        Backwards incompatible change: these flags have been removed from the CLI.
        @ul
          @li
            @code{reformatDocstrings} in favor of @code{reformatComments}
          @li
            @code{alignStripMarginStrings} in favor of @code{assumeStandardLibraryStripMargin}
  @sect{0.2.12}
    @ul
      @li
        New @code{--spaceBeforeContextBoundColon} flag.
        @hl.scala
          // false (default)
          def f[T: Numeric](t: T) = ???
          // true
          def f[T : Numeric](t: T) = ???

  @sect{0.2.11}
    @ul
      @li
        Add 2 indentation for non-boolean infix operators in "top-level"
        statements. For example,

        @hl.scala
          // 0.2.10
          {
            buf +=
            sh"${foo} aa"
          }
          // 0.2.11
          {
            buf +=
              sh"${foo} aa"
          }


  @sect{0.2.10}
    @ul
      @li
        Ignore if you don't use @code{--danglingParentheses true}
        Fixes single issue reported in @issue(325).

        @hl.scala
          // 0.2.9
          Props(
              new Actor {
            context.stop(self)
            override def receive = Actor.emptyBehavior
          }
          )
          // 0.2.10
          Props(new Actor {
            context.stop(self)
            def receive = Actor.emptyBehavior
          })
  @sect{0.2.9}
    @ul
      @li
        Decrease non-idempotent cases in test suite from 15 to 11.
        I observed that non-idempotent formatting happens far less often on
        code that is already formatted with scalafmt. In a sample of 3.2
        million lines of code (~27.000 source files), only a single source
        file rotates between two formatting layouts with every run of scalafmt.
        All other files reach a fixpoint after one pass of scalafmt.
      @li
        New flag: @code{--reformatDocstrings false} to disable docstring
        reformatting (on by default).
      @li
        New flag: @code{--bestEffortInDeeplyNestedCode} (off by default) to
        reenable best-effort formatting as was default prior to 0.2.6.
        If you get a lot of "Search state exploded" errors in IntelliJ,
        you might want to try this out.
        The setting was disabled in 0.2.6 because it sometimes produces bad
        output.
      @li
        Small improvements to @code{--danglingParentheses}. I imagine we
        will soon officially support a style with these settings

        @hl.scala
          --continuationIndentCallSite 2
          --danglingParentheses true
          --alignByOpenParenCallSite false
          --maxColumn 100


        Give it a try see if you like it.
        It's somewhat inspired by IntelliJ's default formatting settings.
        I don't know yet what to call the style.
        Thanks @user{lihaoyi} for helping out.
      @li
        Fixed bug in try/catch without curly braces, @issue(350).
      @li
        Fixed bug in function applications with lambda arguments.
      @li
        Improved multiline strings in function calls with many arguments.

  @sect{0.2.8}
    @ul
      @li
        Decrease non-idempotent cases in test suite from 56 to 15.
  @sect{0.2.7}
    Skipping, messed up Sonatype release.
  @sect{0.2.6}
    @ul
      @li
        @lnk("43 issues closed on Github.", "https://github.com/olafurpg/scalafmt/issues?q=milestone%3A0.2.6+is%3Aclosed")
      @li
        @lnk("See diff between 0.2.5 and 0.2.6 on three million lines of code.",
             "https://github.com/olafurpg/scala-repos/pull/2/files#diff-a308e735c41c50c4f716593ee29625d0R25")
        Getting unicorn? That patch is roughly 26mb uncompressed, download it
        compressed @lnk("here", "https://github.com/olafurpg/scala-repos/pull/2/files#diff-a308e735c41c50c4f716593ee29625d0R25").
        I recommend you reformat your whole project before upgrading.
      @li
        @note. See @issue(339). My previous claims that scalafmt is
        idempotent were false.
        Still, 0.2.6 fixes a bunch of idempotency issues so I definitely
        recommend you upgrade. However, I don't recommend
        you enforce that all files are formatted with scalafmt in your CI build.
      @li
        Line breaks around infix operators like @code{+ - / += >>= ^^ || &&}
        are preserved from the original input, even if that means the output
        breaks the @code{--maxColumn} limit. Why? Because infix operators are
        heavily used in DSLs, which often use special formatting layouts to
        express ideas. Instead of ruining the hard-earned formatting layout
        in the original source, I prefer to keep it until scalafmt becomes smarter.
        In future releases, I would like to add support to format at least the most
        common operators like @code{+ && || -}.
      @li
        Scalafmt will no longer make a best-effort to format files with
        deeply nested function applications that cause search state explosions.
        Instead, scalafmt will fail to format those files. Only 56 out of
        ~9.350 files (from Akka, Spark, IntelliJ Scala plugin and a few other
        projects) are affected by this change.
        Hopefully, we can lower that count to 0 with future releases.
      @li
        The Scala.js style got numerous improvements. It was even used to merge a
        @lnk("PR to scala-js-dom with a 1.800 LOC diff",
             "https://github.com/scala-js/scala-js-dom/pull/233").
        However, the Scala.js style is still experimental and needs further
        improvements to fully capture the extensive Scala.js coding style.
      @li
        This formatting layout
        @hl.scala
          function(
              argument1, argument2)

        has been removed in favor of either of these

        @hl.scala
          function(argument1,
                   argument2)
          // OR
          function(
              argument1,
              argument2)
      @li
        New flag: @code{--alignByOpenParenCallSite false} to disable the following
        formatting layout for argument lists.
        @hl.scala
          function(argument1,
                   argument2)

        Tuples will still be aligned by the opening parenthesis.
      @li
        New flag: @code{--danglingParentheses true} for users who want dangling
        parentheses. This comes at the price of not being able to
        force "config-style" arguments. I highly recommend you set
        @code{--alignByOpenParenCallSite false} in combination with this flag.
        Note that this flag is quite different from the Scalariform dangling
        parenthesis option.
      @li
        New flag: @code{--rewriteTokens from1;to1,from2;to2,...} to rewrite
        arbitrary tokens into other tokens. For example,
        @code{--rewriteTokens ⇒;=>,←;<-} will rewrite unicode arrows to their
        ascii equivalents. Flip the tokens to get the opposite behavior.
      @li
        New flag: @code{--spaceAfterTripleEquals true} to get spaces after
        triple equals in cases like this
        @hl.scala
          x should === (y)
      @li
        We merged PRs from 5 contributors:
        @users(
            "i-am-the-slime",
            "williamho",
            "anna-zzz",
            "djspiewak",
            "maximn"
        ).
        We received issues from 12 contributors:
        @users(
            "TimothyKlim",
            "anna-zzz",
            "dabd",
            "densh",
            "djspiewak",
            "easel",
            "jvican",
            "mtomko",
            "nicolasstucki",
            "reactormonk",
            "sjrd",
            "windfansy"
        ).
        Thank you everyone!
      @li
        I will be traveling and mostly away from the internet in July
        so I don't expect 0.2.7 will be released until sometime in August.
        If you are interested in becoming a scalafmt maintainer, contact me
        and I will be happy to help you get setup before I leave in July.
      @li
        Last but not least, I handed in my Master's thesis.
        The 55 page report is
        @lnk("here",
             "https://geirsson.com/assets/olafur.geirsson-scalafmt-thesis.pdf"),
        if you are interested in reading all about code formatting and how scalafmt works.
        I will continue to work on scalafmt.
        However, I expect the development of will slow down considerably since
        the project will no longer be my full-time job.

  @sect{0.2.5}
    @ul
      @li
        SBT plugin now formats files in parallel like the CLI.
        If you don't use the SBT plugin, you don't need to upgrade to 0.2.5.
      @li
        IntelliJ plugin now picks up configuration from @code("$HOME/.scalafmt")
        if there is no @code(".scalafmt") in a project's root directory.
        See @issue(239).

  @sect{0.2.4}
    @ul
      @li
        @lnk("17 issues closed on Github.", "https://github.com/olafurpg/scalafmt/issues?utf8=%E2%9C%93&q=is%3Aissue+milestone%3A0.2.4")
      @li
        @lnk("See diff between 0.2.3 and 0.2.4 on three million lines of code.",
             "https://github.com/olafurpg/scala-repos/pull/1/files#diff-34de65dbb43d071baaf87f34e40e123cL44")
        There are many new changes.
        I recommend you reformat your whole project before upgrading.
        The plan from now on is to release a diff like this for each new release.
      @li
        CLI now formats files in parallel. Formatting a large repo is around 6x
        faster on my machine with 8 virtual cores.
      @li
        Line breaking is now preserved in infix applications. Your pretty DSLs
        should not be ruined by scalafmt anymore.
      @li
        By default, scalafmt now puts a newline before every @code("with") if a class/trait/object
        definition doesn't fit in a single line. Set @code("--binPackParentConstructors true")
        to get the old behavior where scalafmt would fit as many parent constructors
        on a line as possible.
      @li
        For comprehensions, anonymous functions, tuples, var re-assignment,
        default parameter values and named arguments received a lot of
        attention and should look nicer now.
      @li
        Thanks to @user("fthomas"),
        the SBT plugin now uses @code("unmanagedSourceDirectories") instead of
        @code("scalaSource") to decide which files to format.
        This should improve your experience in Scala.js and cross-built projects.
  @sect{0.2.3}
    @p
    @ul
      @li
        @lnk("5 issues closed on Github.", "https://github.com/olafurpg/scalafmt/issues?utf8=%E2%9C%93&q=is%3Aissue+milestone%3A0.2.3")
      @li
        Fixes 3 issues that caused non-idempotent formatting.
        The tests now format 1.244.070 LOC @b("twice") to ensure that
        scalafmt is idempotent.
      @li
        @sect.ref{--assumeStandardLibraryStripMargin} is now disabled by default for two
        reasons: 1. it may cause non-idempotent formatting in very rare cases
        and 2. it makes the false assumption that
        @code("stripMargin") comes from the standard library (discussion here @issues(170)).
        Refer to @sect.ref{--assumeStandardLibraryStripMargin} to enable it at your own risk.
      @li
        IntelliJ plugin does not require restart when @code(".scalafmt") changes.
        Instead, new changes are picked up automatically and a green info bubble
        pops up.
  @sect{0.2.2}

    @p
      @note. This release contains a bug, see @issue(192).
      Please hold off from upgrading.

    @p
      This release changes the formatting rules for many small cases.
      I recommend you reformat your whole project in one commit.

    @ul
      @li
        Issues closed: @issues(171, 177, 175, 183, 178, 116, 186,
        168, 165, 164, 163, 162, 161, 160, 159, 158, 157, 169, 114).
        Thank you everyone who reported bugs via Github and Gitter.
      @li
        New @code("--spacesInImportCurlyBraces") flag.

  @sect{0.2.1}
    @ul
      @li
        @code("defaultWithAlign") will not jump scope @issue(152).
      @li
        @code("defaultWithAlign") now includes a lot more alignment rules,
        see the @lnk("diff against 0.2.0", "https://github.com/olafurpg/scalafmt/commit/9b14be99510f4763b8ea59be91b99af4ea4f8ad7").
        and @lnk("updated test suite", "https://github.com/olafurpg/scalafmt/blob/555e87cabb3caf313a5915ac6506f9a79a84457c/core/src/test/resources/align/AlignTokens.stat").
      @li
        If you had troubles with @code("--alignTokens") please try again,
        it may have been caused by @issue(151).
      @li
        @code(".scalafmt") now supports comments starting with @code("#").
      @li
        Other closed issues: @issues(148, 147, 149, 155, 153).
        Thanks for everyone who contributed bug reports via Github, Gitter
        and Reddit.

  @sect{0.2.0}

    @ul
      @li
        Custom style configuration, see @sect.ref{Configuration}
      @li
        Token alignment, see @sect.ref{--alignTokens}
      @li
        Closed issues: @issues( 144, 143, 138, 131, 120, 114).
      @li
        @code("ScalaFmt") was renamed to @code("Scalafmt").
      @li
        The @code("scalafmtFormat") sbt task is now @code("scalafmt").
      @li
        @code("ScalaStyle") is now @code("ScalafmtStyle").
      @li
        @code("ScalaFmt.format") and
        @code("ScalaFmt.format_!") have been replaced by a single
        @code("Scalafmt.format"). The new methods supports more flexibility
        via the @lnk("ScalafmtRunner", "https://github.com/olafurpg/scalafmt/blob/555e87cabb3caf313a5915ac6506f9a79a84457c/core/src/main/scala/org/scalafmt/ScalafmtRunner.scala")
        argument.

  @sect{0.1.6}
    @ul
      @li
        Scalafmt will not hang anymore, not even for
        @lnk("deeply nested computer generated code", "https://github.com/olafurpg/scalafmt/blob/124134dcd6a6c45d398d713ade266e071f4dc73c/core/src/test/scala/org/scalafmt/PathologicalCasesTest.scala#L13").
        When scalafmt detects it's struggling to format a statement,
        it falls back to heuristics that return decent, but suboptimal, formatting
        output. If the heuristics still fail, scalafmt falls back to the
        original formatting of the code up until the next statement.
      @li
        Spark, Akka and the IntelliJ Scala Plugin have been added to the
        test suite, which now runs on a total of 9.398 files from external
        projects. That's almost 8.000 more files than in 0.1.5! Some key
        statistics from formatting all 9.398 files:

        @table
          @thead
            @tr
              @th
                Computer
              @th
                75th percentile
              @th
                Average
              @th
                Max
          @tbody
            @tr
              @td
                2.5 GHz i7 Macbook Pro
              @td
                119ms
              @td
                112ms
              @td
                7.1s
            @tr
              @td
                Travis CI (for fun)
              @td
                3.7s
              @td
                2.8s
              @td
                45.2s

        @p
          There is still a lot of work to do. The plan is to investigate
          the 90+ percentile cases in future releases as well as run
          more JMH benchmarks.

      @li
        For loops can now have multiple if guards in a row. For example:
        @example
          object ForLoopGuards {
            for {
              x <- List(1, 2, 3)
              if (x != 1)
              if (x != 3)
            } yield x
          }
      @li
        Fixed bugs where a newline would come after return keyword.
      @li
        Fixed bugs where scalafmt would crash on the following if it exceeded
        the column limit.

        @hl.scala
          new Foo with Bar with Kaz {}
      @li
        Scalafmt no longer crashes when xml literal are used in infix
        applications.
      @li
        Minor changes to select statement formatting.

  @sect{0.1.5}
    @ul
      @li
        Select chains are kept on a single line if they fit up to the last
        opening curly brace.

        @hl.scala
          // column          |
          // before
          List(1)
            .map { x =>
              x + 1
            }
          // after
          List(1).map { x =>
            x + 1
          }
      @li
        Really long sequences of infix applications (for example, string
        concatenations) don't hog anymore.
      @li
        Various small bug and speed improvements.
        For example, all files in
        @lnk("Fastparse", "https://github.com/lihaoyi/fastparse/"),
        @lnk("Scalding", "https://github.com/twitter/scalding") and
        @lnk("Goose", "https://github.com/GravityLabs/goose") that had
        problems with 0.1.4 format without issues on 0.1.5.
      @li
        Ramped up testing.
        Fastparse, Scalding and Goose
        have been added to the test suite, which now runs on 1405 files
        from external projects.
        The plan is to reach around 28.000 files in the coming 0.1.x releases,
        by including projects like
        @lnk("spark", "https://github.com/olafurpg/scalafmt/issues/133"),
        @lnk("akka", "https://github.com/olafurpg/scalafmt/issues/134") and
        @lnk("intellij-scala", "https://github.com/olafurpg/scalafmt/issues/135").
      @li
        Made rather large internal refactorings, which shouldn't affect
        you as a user.
  @sect{0.1.4}
    @ul
      @li
        @sect.ref{--assumeStandardLibraryStripMargin}.
      @li
        @sect.ref{// format: off}.
      @li
        @sect.ref{Select chains}.
      @li
        @lnk("Hanging behavior", "https://github.com/olafurpg/scalafmt/issues/127").
      @li
        @lnk("Dozens of other small fixes", "https://github.com/olafurpg/scalafmt/pull/128").

  @sect{0.1.3}
    @ul
      @li
        @lnk("Better handling of type parameters", "https://github.com/olafurpg/scalafmt/issues/117").
        Try it on your @lnk("craziest type signatures", "https://github.com/olafurpg/scalafmt/blob/6c4e5165bcbfa3a932cc112d7e87a1e919fcaf99/core/src/test/resources/default/DefDef.stat#L63").
      @li
        @lnk("Array assignments are treated like regular call-site applications", "https://github.com/olafurpg/scalafmt/issues/122").
      @li
        Commented out code remains un-indented (lines that start with
        @code("//") stay at indentation 0).
      @li
        Blank lines are only forced before top-level definitions and methods
        with docstrings.

  @sect{0.1.2}

    @ul
      @li
        Closed @lnk("17 formatting issues", "https://github.com/olafurpg/scalafmt/issues?utf8=%E2%9C%93&q=author%3Asjrd+created%3A%3C2016-03-10").
        Thank you Sebastian!
      @li
        Added Java 6+7 compatibility, was Java 8 before.

  @sect{0.1.1}
    @ul
      @li
      The @code("-f") flag in the CLI can be a directory.

  @p
    This page was last updated on @lastUpdated.
